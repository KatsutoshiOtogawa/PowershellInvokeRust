name: Release

on:
  push:
    tags:
      - 'v*'

  pull_request:
    branches: ["main"]

permissions:
  # for create release tag
  contents: write

jobs:
  rust-build:
    # 必要になる
    runs-on: ubuntu-20.04

    env:
      CARGO_TERM_COLOR: always
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-12]

    steps:
    - name: specific running os arch.
      id: osarch
      shell: bash
      run: |
        target=""
        ext=""
        if [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
          target="x86_64-unknown-linux-gnu"
          ext="so"
        elif [ "${{ matrix.os }}" = "windows-2019" ]; then
          target="x86_64-pc-windows-msvc"
          ext="dll"
        elif [ "${{ matrix.os }}" = "macos-12" ]; then
          target="x86_64-apple-darwin"
          ext="dylib"
        else
          echo "error"
        fi
        echo "target=${target}" >> $env:GITHUB_OUTPUT
        echo "ext=${ext}" >> $env:GITHUB_OUTPUT

    - uses: actions/checkout@v4
    - name: Build
      run: cd rust_src && cargo build --target "${{ steps.osarch.outputs.target }}" --verbose --release

    - name: upload share_library
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.osarch.outputs.target }}
        path: rust_src/target/"${{ steps.osarch.outputs.target }}"/release/rust_src."${{ steps.osarch.outputs.ext }}"

    # - name: Run tests
    #   run: cargo test --verbose

  csharp-build:
    # 必要になる
    runs-on: windows-2019

        # id: tag_version
        # run:  |
        #   $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
        #   echo $tag
        #   echo "tag=${tag}" >> $env:GITHUB_OUTPUT
    steps:
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - uses: actions/checkout@v4
    - name: Build
      run: cd csharp_src && dotnet build --configuration Release

    - name: upload share_library net6.0-artifact
      uses: actions/upload-artifact@v3
      with:
        name: net6.0-artifact
        path: csharp_src/lib/bin/Release/net6.0/lib.dll
        
    - name: upload share_library net7.0-artifact
      uses: actions/upload-artifact@v3
      with:
        name: net7.0-artifact
        path: csharp_src/lib/bin/Release/net7.0/lib.dll

    - name: upload share_library net48-artifact
      uses: actions/upload-artifact@v3
      with:
        name: net48-artifact
        path: csharp_src/lib/bin/Release/net48/lib.dll

  powershell_release:
    runs-on: windows-2019
    needs: [rust-build, csharp-build]


    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Get Tag Version
        id: tag_version
        run:  |
          $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
          echo $tag
          echo "tag=${tag}" >> $env:GITHUB_OUTPUT
      #  tempalteから.psd1ファイルを作成する。
      - name: Generate PSD1
        run: |
          $tagVersion = "${{ steps.tag_version.outputs.tag }}"
          echo $tagVersion
          $tagVersion = $tagVersion -replace '^v', ''  # 先頭の 'v' を削除
          $content = Get-Content PowershellInvokeRust/PowershellInvokeRust.psd1 -Raw
          # replace 
          $content  -replace '#tagVersion', "$tagVersion" |
            Set-Content -Path PowershellInvokeRust/PowershellInvokeRust.psd1
        
      - name: Download artifacts x86_64-unknown-linux-gnu
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: ./PowershellInvokeRust/share_lib/x86_64-unknown-linux-gnu/

      - name: Download artifacts x86_64-pc-windows-msvc
        uses: actions/download-artifact@v3
        with:
          name: x86_64-pc-windows-msvc
          path: ./PowershellInvokeRust/share_lib/x86_64-pc-windows-msvc/

      - name: Download artifacts x86_64-apple-darwin
        uses: actions/download-artifact@v3
        with:
          name: x86_64-apple-darwin
          path: ./PowershellInvokeRust/share_lib/x86_64-apple-darwin/

      - name: Download artifacts net6.0
        uses: actions/download-artifact@v3
        with:
          name: net6.0-artifact
          path: ./PowershellInvokeRust/csharp_dll/net6.0/

      - name: Download artifacts net7.0
        uses: actions/download-artifact@v3
        with:
          name: net7.0-artifact
          path: ./PowershellInvokeRust/csharp_dll/net7.0/

      - name: Download artifacts net48
        uses: actions/download-artifact@v3
        with:
          name: net48-artifact
          path: ./PowershellInvokeRust/csharp_dll/net48/

      - name: Publish Module
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: Publish-Module -Path ./PowershellInvokeRust -NuGetApiKey  "$env:NUGET_API_KEY"

      - name: Release tag
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false


# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]


# jobs:
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

# name: .NET Core Desktop

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:

#   build:

#     strategy:
#       matrix:
#         configuration: [Debug, Release]

#     runs-on: windows-latest  # For a list of available runner types, refer to
#                              # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

#     env:
#       Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
#       Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
#       Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
#       Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 0

#     # Install the .NET Core workload
#     - name: Install .NET Core
#       uses: actions/setup-dotnet@v3
#       with:
#         dotnet-version: 6.0.x

#     # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
#     - name: Setup MSBuild.exe
#       uses: microsoft/setup-msbuild@v1.0.2

#     # Execute all unit tests in the solution
#     - name: Execute unit tests
#       run: dotnet test

#     # Restore the application to populate the obj folder with RuntimeIdentifiers
#     - name: Restore the application
#       run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
#       env:
#         Configuration: ${{ matrix.configuration }}

#     # Decode the base 64 encoded pfx and save the Signing_Certificate
#     - name: Decode the pfx
#       run: |
#         $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
#         $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
#         [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

#     # Create the app package by building and packaging the Windows Application Packaging project
#     - name: Create the app package
#       run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
#       env:
#         Appx_Bundle: Always
#         Appx_Bundle_Platforms: x86|x64
#         Appx_Package_Build_Mode: StoreUpload
#         Configuration: ${{ matrix.configuration }}

#     # Remove the pfx
#     - name: Remove the pfx
#       run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

#     # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v3
#       with:
#         name: MSIX Package
#         path: ${{ env.Wap_Project_Directory }}\AppPackages

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Build on Linux
#         run: |
#           # ビルドコマンドをここに記述

#       - name: Archive Linux build
#         uses: actions/upload-artifact@v2
#         with:
#           name: linux-build
#           path: path/to/linux/build/directory

    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v2

    #   - name: Download artifacts
    #     uses: actions/download-artifact@v2
    #     with:
    #       name: linux-build
    #       path: path/to/linux/build/directory

    #   - name: Download Windows artifacts
    #     uses: actions/download-artifact@v2
    #     with:
    #       name: windows-build
    #       path: path/to/windows/build/directory

    #   - name: Download macOS artifacts
    #     uses: actions/download-artifact@v2
    #     with:
    #       name: macos-build
    #       path: path/to/macos/build/directory

    #   - name: Compress and create special archive
    #     run: |
    #       # 圧縮や特殊な形式のファイルに結合する処理を記述

    #   - name: Upload special archive
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: special-archive
    #       path: path/to/special/archive